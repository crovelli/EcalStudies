import FWCore.ParameterSet.Config as cms

looper = cms.Looper("JPsiCalibration",

                    resonanceMass    = cms.untracked.double( 3.096 ),
                    resonancePdgId   = cms.untracked.double( 443 ),
                    maxLoops         = cms.untracked.uint32(1),
                    ZCalib_CalibType = cms.untracked.string('ABS_SCALE'),
                    ZCalib_InvMass   = cms.untracked.string('E5x5TRMass'),

                    initialMiscalibrationBarrel = cms.untracked.string('EcalBarrel_NoMiscal.xml'),
                    initialMiscalibrationEndcap = cms.untracked.string('EcalEndcap_NoMiscal.xml'),
                    
                    HLTriggerResults     = cms.InputTag("TriggerResults","","HLT"),
                    mcProducer           = cms.untracked.string(''),
                    rechitCollectionEB   = cms.string('EcalRecHitsEB'),
                    rechitCollectionEE   = cms.string('EcalRecHitsEE'),
                    rechitProducerEB     = cms.string('recalibRechit'),
                    rechitProducerEE     = cms.string('recalibRechit'),
                    scCollectionEB       = cms.string('recalibSC'),
                    scProducerEB         = cms.string('correctedHybridSuperClusters'),
                    scCollectionEE       = cms.string(''),
                    scProducerEE         = cms.string('electronRecalibSCAssociator'),
                    electronProducer     = cms.string('electronRecalibSCAssociator'),
                    electronCollection   = cms.string(''),                    
                    tracksCollection     = cms.InputTag("generalTracks"),
                    calotowersCollection = cms.InputTag("towerMaker"),
                    
                    wantEtaCorrection = cms.untracked.bool(False),
                    p0_EB = cms.untracked.double(1.0),
                    p2_EB = cms.untracked.double(0.0),
                    p4_EB = cms.untracked.double(0.0),
                    p0_EE = cms.untracked.double(1.0),
                    p2_EE = cms.untracked.double(0.0),
                    p4_EE = cms.untracked.double(0.0),
                    
                    etaBins = cms.untracked.uint32(10),
                    etBins  = cms.untracked.uint32(10),
                    etaMin  = cms.untracked.double(0.),
                    etMin   = cms.untracked.double(0.),
                    etaMax  = cms.untracked.double(3.),
                    etMax   = cms.untracked.double(100.),

                    electronSelection = cms.untracked.uint32(0),

                    useHoESelection = cms.untracked.bool(True),
                    useSigmaEtaEtaSelection = cms.untracked.bool(True),
                    useDeltaPhiSelection = cms.untracked.bool(True),
                    useDeltaEtaSelection = cms.untracked.bool(True),
                    useEmIsolSelection = cms.untracked.bool(True),
                    useHadIsolSelection = cms.untracked.bool(True),
                    useTrackerIsolSelection = cms.untracked.bool(True),
                    useInvMassSelection = cms.untracked.bool(True),
                    etCut         = cms.untracked.double(4.),

                    sigmaEtaEta_barrel = cms.untracked.double(0.0115),
                    sigmaEtaEta_endcap = cms.untracked.double(0.03),
                    HoE_barrel    = cms.untracked.double(0.041),
                    HoE_endcap    = cms.untracked.double(0.041),
                    dEta_barrel   = cms.untracked.double(0.0060),
                    dEta_endcap   = cms.untracked.double(0.0075),
                    dPhi_barrel   = cms.untracked.double(0.048),
                    dPhi_endcap   = cms.untracked.double(0.048),
                    emIsol        = cms.untracked.double(17.),
                    hadIsol       = cms.untracked.double(1.5),
                    trackerIsol   = cms.untracked.double(2.1),
                    minInvMassCut = cms.untracked.double(1.0),
                    maxInvMassCut = cms.untracked.double(5.0),
                    
                    outputFile = cms.string('zeeCalibration_test.root')
                    )
